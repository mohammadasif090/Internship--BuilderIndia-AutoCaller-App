package academy.learnprogramming.autocaller;

import android.Manifest;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Handler;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

public class MainActivity extends AppCompatActivity {
    private static final String TAG = "MainActivity";
    private static final int FILE_SELECT_CODE = 2;
    private static final int AUDIO_SELECT_CODE = 3;
    private static final int REQUEST_READ_EXTERNAL_STORAGE = 1;
    private static final int REQUEST_CALL_PHONE = 5;
    int i = 0, callSequentially = 0, stopCalling = 0;
    MediaPlayer mPlayer = new MediaPlayer();
    private TextView filePathView, audioPathView, status;
    private Button fileButton, audioButton, call, reset, callNext, help;
    private String[] contacts = new String[100];

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        filePathView = (TextView) findViewById(R.id.filePath);
        fileButton = (Button) findViewById(R.id.fileButton);
        audioPathView = (TextView) findViewById(R.id.audioPath);
        audioButton = (Button) findViewById(R.id.audioButton);
        status = (TextView) findViewById(R.id.status);
        call = (Button) findViewById(R.id.call);
        status.setMovementMethod(new ScrollingMovementMethod());
        status.setText("calling status will be shown here\n");
// reset status and set value of i =0
        reset = (Button) findViewById(R.id.reset);
        reset.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                i = 0;
                callSequentially = 0;
                status.setText("Suceessfully state reset\n");
            }
        });
        callNext = (Button) findViewById(R.id.callNext);
        callNext.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (contacts[i] != null) {
                    dialNumber(contacts[i++]);
                } else {
                    Toast.makeText(getApplicationContext(), "empty!!select file to start calling", Toast.LENGTH_LONG).show();
                }
            }
        });
//phone state listener11
        TelephonyManager tManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
        PhoneStateListener phoneStateListener = new PhoneStateListener() {
            @Override
            public void onCallStateChanged(int state, String phoneNumber) {
//                super.onCallStateChanged(state, phoneNumber);
                String number = phoneNumber;
                switch (state) {
                    case TelephonyManager.CALL_STATE_IDLE:
                        mPlayer.stop();
//                        Toast.makeText(getApplicationContext(), "idle state", Toast.LENGTH_SHORT).show();
                        if (stopCalling == 0) {
                            if (callSequentially == 1) {
                                if (contacts[i] != null) {
                                    dialNumber(contacts[i++]);
                                }
                            }
                        }
                        break;
                    case TelephonyManager.CALL_STATE_OFFHOOK:
                        Toast.makeText(getApplicationContext(), "calling..", Toast.LENGTH_LONG).show();
                        status.append("Done Calling..\n");
                        if (contacts[i] != null) {
                            status.append("Next number to call: " + contacts[i] + "\n");
                        } else {
                            status.append("ALL NUMBERS CALLED FROM THIS FiLE");
                        }
                        playMusic();
                        break;

                    case TelephonyManager.CALL_STATE_RINGING:
                        Toast.makeText(getApplicationContext(), "incoming call", Toast.LENGTH_SHORT).show();
                        break;
                }
            }
        };
        tManager.listen(phoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);
//         ListenToPhoneState listener = new ListenToPhoneState();
//        tManager.listen(listener, PhoneStateListener.LISTEN_CALL_STATE);
///permision
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) + ContextCompat.checkSelfPermission(this, Manifest.permission.CALL_PHONE)
                != PackageManager.PERMISSION_GRANTED) {
            // Permission is not granted
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.CALL_PHONE}, REQUEST_READ_EXTERNAL_STORAGE);
        }
        // button for  reading File
        Button fileContent = (Button) findViewById(R.id.fileContent);
        fileContent.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                readFile(filePathView.getText().toString());
            }
        });
        // button to browse for file path
        fileButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showFileChooser(FILE_SELECT_CODE);
            }
        });
        // button to browse for audio path
        audioButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showFileChooser(AUDIO_SELECT_CODE);
            }
        });
//button to start calling
        call.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (contacts[i] != null) {
//                    playMusic();
                    dialNumber(contacts[i]);
                    i++;
                    callSequentially = 1;
//                    Toast.makeText(getApplicationContext(), "calling  " + contacts[i - 1], Toast.LENGTH_SHORT).show();

                } else {
                    Toast.makeText(getApplicationContext(), "select a file", Toast.LENGTH_SHORT).show();
                }
            }
        });

        help = (Button) findViewById(R.id.help);
        help.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent help = new Intent(getApplicationContext(), help.class);
                startActivity(help);
            }
        });
    }

    protected void playMusic() {
        File file = new File(audioPathView.getText().toString());
        if (file.exists()) {
            Uri uri = Uri.fromFile(file);
            // Initialize the media player
            mPlayer = MediaPlayer.create(getApplicationContext(), uri);
            // Start playing music
            mPlayer.start();
            mPlayer.setLooping(true);
//            Toast.makeText(getApplicationContext(), "Music playing.", Toast.LENGTH_SHORT).show();
        }
    }

    private void showFileChooser(int code) {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("*/*");
//        intent.addCategory(Intent.CATEGORY_OPENABLE);
        try {
            startActivityForResult(Intent.createChooser(intent, "Select a File to Upload"), code);
        } catch (Exception e) {
            Log.e(TAG, " choose file error " + e.toString());
        }
    }

    public void readFile(String path) {
        File file = new File(path);
        StringBuilder buillder = new StringBuilder();

        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String line;
            int i = 0;
            while ((line = br.readLine()) != null) {
                contacts[i] = line;
                status.append(contacts[i] + "\n");
                Log.e(TAG, "readFile: read number is " + contacts[i]);
                i++;
                buillder.append(line);
                buillder.append("\n");
            }
            i = 0;
            status.append("***************\n" + "Next number to call : " + contacts[i] + "\n");
            br.close();

        } catch (Exception e) {
            Toast.makeText(getApplicationContext(), "first select the file", Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }
        Log.e(TAG, "readFile: read file is  " + buillder.toString());
//        status.setText(buillder.toString());
    }

    private void dialNumber(final String phoneNumber) {
        Intent intent = new Intent(Intent.ACTION_CALL, Uri.fromParts("tel", phoneNumber, null));
        startActivity(intent);
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        switch (requestCode) {
            case REQUEST_READ_EXTERNAL_STORAGE: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED) {
                    Toast.makeText(this, "permission granted", Toast.LENGTH_LONG).show();
                } else {
                    Toast.makeText(this, "permission denied", Toast.LENGTH_LONG).show();
                }
                return;
            }
            // other 'case' lines to check for other
            // permissions this app might request.
        }
    }//end of resquestPermissionResult

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == FILE_SELECT_CODE || requestCode == AUDIO_SELECT_CODE) {
            if (resultCode == RESULT_OK) {
                Uri uri = data.getData();
                String filePath = "";
                try {
                    filePath = PathUtil.getPath(getApplicationContext(), uri);

                } catch (Exception e) {
                    Toast.makeText(getApplicationContext(), "failed getting path", Toast.LENGTH_SHORT).show();
                }
//                String path = uri.getPath();
                if (requestCode == FILE_SELECT_CODE) {
                    filePathView.setText(filePath);
                } else {
                    audioPathView.setText(filePath);
                }
            }
        }

    }

    private static final String storeFilePath = "filePath", storeAudioPath = "AudioPath", storeStatus = "status";

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        outState.putString(storeFilePath, filePathView.getText().toString());
        outState.putString(storeAudioPath, audioPathView.getText().toString());
        outState.putString(storeStatus, status.getText().toString());
        super.onSaveInstanceState(outState);
    }

    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        filePathView.setText(savedInstanceState.getString(storeFilePath));
        audioPathView.setText(savedInstanceState.getString(storeAudioPath));
        status.setText(savedInstanceState.getString(storeStatus));
    }
}
